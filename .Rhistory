install.packages("swirl")
package_version(swirl)
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
library(swilr)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version(dplyr)
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
play()
5:20:2
next()
nxt()
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -X:size)
select(cran, -X:-size)
-5:20
select(cran, -X:-size)
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
fitler(cran, r_version == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, "size" > 100500, "r_os" == "linux-gnu")
filter(cran, size > 100500, "r_os" == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
avg_bytes <- summarize(cran, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
bye()
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, size, mean)
?summarize
summarize(by_pacakage, mean)
summarize(by_pacakage, mean(size))
summarize(by_pacakage, mean, size)
summarize(by_package, mean, size)
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_count
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = .99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
quantile(pack_sum$countries, probs = .99)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
library(tidyr)
students
gather
?gather
gather(studnets, sex, count, -grade)
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
?spread
?spread
submit()
library(readr)
parse_number
?parse_number
parse_number("class5")
/
?mutate
submit()
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?contains
?select
?separate
submit()
submit()
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
install.packages("ggplot2")
swirl()
pollutionm
pollution
head(pollution)
dim(pollution)
bye()
swirl()
summary(pollution$pm25)
ppm
quantile(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
rug
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
albine(v=12, lwd = 2)
abline(v=12, lwd = 2)
abline(v=median(ppm), lwd = 4, col="magenta")
abline(v=median(ppm), col="magenta", lwd = 4)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pollution, col="red", formula = pm25~region)
boxplot(pollution, col="red", pm25~region)
boxplot(pm25~region, col="red")
boxplot(data = pm25~region, col="red")
boxplot(data = pollution, formula = pm25~region, col="red")
pollution
names(pollution)
boxplot(data = pollution, formula = pm25~region, col="red")
?boxplot
boxplot(pollution, formula = pm25~region, col="red")
boxplot(x = pm25~region, data=pollution, col="red")
boxplot(data=pollution, x = pm25~region, col="red")
boxplot(x=pollution, formula = pm25~region, col="red")
boxplot(pm25~region, data=pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- pollution$region == "east"
east <- subset(pollution,region == "east")
head(east)
hist(east$pm25, col="green")
hist(subset(pollution, region == "west"), col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
R(pollution, plot)
call(pollution, plot)
plot(pollution, plot(latitude, pm25))
plot(pollution, plot("latitude", "pm25"))
with(pollution ,plot)
with(pollution, plot(latitude, pm25))
abline(h=12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lt=2)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1,2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
bye()
library(swirl)
swirl90
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
this_day.year()
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1/9/2012")
dmy("1/9/2012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours= 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(hours = 4, minutes = 56)
this_moment <- update(this_moment, hours = 4, minutes = 56)
this_moment
?now
now(tzone="America/New_York")
now("America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 37)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- nyc + hours(15) + minutes(50)
arrive <- depart + hours(15) + minutes(50)
with_tz(arrive, "Hong_Kong")
with_tz(arrive, tzone = "Hong_Kong")
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
my_data <- read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
dt <- data.table(my_data)
dt <- table(my_data)
data.table
?data.table
library(data.table)
library(gtable)
?data.table
install.packages("data.table")
library(data.table)
my_dt <- data.table(read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"))
my_dt <- data.table(read.csv("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", skip = 4, nrows = 215, stringsAsFactors = FALSE))
my_dt <- my_dat[X != ""]
my_dt <- my_dt[X != ""]
my_dt <- my_dt[, list(X, X.1, X.3, X.4)]
setnames(my_dt, c("X", "X.1", "X.3", "X.4"), c("CountryCode", "rankingGDP", "Long.Name", "gdp"))
gdp <- as.numeric(gsub(",", "", my_dt$gdp))
mean(gdp, na.rm=TRUE)
setwd("/Users/ezraez/code/edu/ds_coursera/get_clean_data_final_proj")
activity_labels <- read.table("uci_har_dataset/activity_labels.txt")
activity_labels
activity_labels[,2] <- as.character(activity_labels[,2])
activity_labels
activity_labels[,2]
features[,2] <- as.character(features[,2])
features <- read.table("uci_har_dataset/features.txt")
features[,2] <- as.character(features[,2])
features[,2]
desired_features.names <- gsub('[-()]', '', desired_features.names)
activity_labels <- read.table("uci_har_dataset/activity_labels.txt")
features <- read.table("uci_har_dataset/features.txt")
desired_features <- grep(".*mean.*|.*std.*", as.character(features[,2]))
desired_features.names <- features[desired_features,2]
desired_features.names = gsub('-mean', 'Mean', desired_features.names)
desired_features.names = gsub('-std', 'Std', desired_features.names)
desired_features.names <- gsub('[-()]', '', desired_features.names)
desired_features.names
